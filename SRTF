#include <stdio.h>
#include <stdlib.h>

struct Process { 
    int pid,burst_time,remaining_time,arrival_time,waiting_time,turnaround_time;
}; 

void srtf(struct Process *processes, int n) {
    int current_time = 0, completed = 0, min_remaining_time, shortest_pid, i, j;

    while (completed != n) {
        min_remaining_time = 9999;
        shortest_pid = -1;

        for (i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0 && processes[i].remaining_time < min_remaining_time && processes[i].arrival_time <= current_time) {
                
                min_remaining_time = processes[i].remaining_time;
                shortest_pid = i;
            }
        }

        if (shortest_pid == -1) {
            printf("CPU idle for 1 unit of time.\n");
            current_time++;
        } else {
            processes[shortest_pid].remaining_time--;
            current_time++;

            if (processes[shortest_pid].remaining_time == 0) {
                completed++;

                processes[shortest_pid].turnaround_time = current_time - processes[shortest_pid].arrival_time;
                processes[shortest_pid].waiting_time = processes[shortest_pid].turnaround_time - processes[shortest_pid].burst_time;
            }
        }
    }
}

int main() {
    int n, i;
    float avg_waiting_time = 0, avg_turnaround_time = 0;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process *processes = (struct Process *) malloc(n * sizeof(struct Process));

    for (i = 0; i < n; i++) {
        printf("Enter the burst time of process %d: ", i+1);
        scanf("%d", &processes[i].burst_time);

        printf("Enter the arrival time of process %d: ", i+1);
        scanf("%d", &processes[i].arrival_time);

        processes[i].pid = i+1;
        processes[i].remaining_time = processes[i].burst_time;
    }

    srtf(processes, n);

    for (i = 0; i < n; i++) {
        avg_waiting_time += processes[i].waiting_time;
        avg_turnaround_time += processes[i].turnaround_time;
    }

    avg_waiting_time /= n;
    avg_turnaround_time /= n;

    printf("Average waiting time: %f\n", avg_waiting_time);
    printf("Average turnaround time: %f\n", avg_turnaround_time);

    return 0;
}

